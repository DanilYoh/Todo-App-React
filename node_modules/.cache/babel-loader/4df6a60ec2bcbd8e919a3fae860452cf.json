{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\danil\\\\VSCodeProjects\\\\todo-app-react\\\\src\\\\components\\\\app\\\\App.js\";\nimport React, { Component } from 'react';\nimport NewTaskForm from '../new-task-form';\nimport TaskList from '../task-list';\nimport Footer from '../footer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class App extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      statusItem: [this.createTaskItem('Сompleted task'), this.createTaskItem('Editing task'), this.createTaskItem('Active task')],\n      filter: 'all'\n    };\n\n    this.onFilterChange = filter => {\n      this.setState({\n        filter\n      });\n    };\n\n    this.onToggleEditing = id => {\n      this.toggleProperty(id, 'editing');\n    };\n\n    this.onToggleCompleted = id => {\n      this.toggleProperty(id, 'completed');\n    };\n\n    this.addTask = text => {\n      const newItem = this.createTaskItem(text);\n      this.setState(_ref => {\n        let {\n          statusItem\n        } = _ref;\n        const newArr = [...statusItem, newItem];\n        return {\n          statusItem: newArr\n        };\n      });\n    };\n\n    this.editingItem = (id, text) => {\n      this.setState(_ref2 => {\n        let {\n          statusItem\n        } = _ref2;\n        const newArr = statusItem.map((el, i) => {\n          if (el.id === id) {\n            el.text = text;\n            el.edit = !statusItem[i].edit;\n          }\n\n          return el;\n        });\n        return {\n          statusItem: newArr\n        };\n      });\n    };\n\n    this.deleteTask = id => {\n      this.setState(_ref3 => {\n        let {\n          statusItem\n        } = _ref3;\n        return {\n          statusItem: statusItem.filter(item => item.id !== id)\n        };\n      });\n    };\n\n    this.toggleProperty = (id, propName) => {\n      this.setState(_ref4 => {\n        let {\n          statusItem\n        } = _ref4;\n        const newArr = statusItem.map((el, i) => {\n          if (el.id === id) {\n            el[propName] = !statusItem[i][propName];\n          }\n\n          return el;\n        });\n        return {\n          statusItem: newArr\n        };\n      });\n    };\n\n    this.onClearCompleted = () => {\n      this.setState(_ref5 => {\n        let {\n          statusItem\n        } = _ref5;\n        return {\n          statusItem: statusItem.filter(el => !el.completed)\n        };\n      });\n    };\n  }\n\n  createTaskItem(label) {\n    return {\n      label: label,\n      id: Math.floor(Math.random() * 1000000),\n      completed: false,\n      active: true,\n      editing: false\n    };\n  }\n\n  filter(items, filter) {\n    switch (filter) {\n      case 'all':\n        return items;\n\n      case 'active':\n        return items.filter(item => item.active);\n\n      case 'done':\n        return items.filter(item => !item.active);\n\n      default:\n        return items;\n    }\n  }\n\n  render() {\n    const taskCount = this.state.statusItem.filter(e => e.active).length;\n    const visibleTasks = this.filter(this.state.statusItem, this.state.filter);\n    return /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"todoapp\",\n      children: [/*#__PURE__*/_jsxDEV(NewTaskForm, {\n        onAddTask: this.addTask\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n        className: \"main\",\n        children: [/*#__PURE__*/_jsxDEV(TaskList, {\n          taskData: visibleTasks,\n          onDeleted: this.deleteTask,\n          onToggleCompleted: this.onToggleCompleted,\n          onToggleEditing: this.onToggleEditing,\n          editingItem: this.editingItem\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Footer, {\n          count: taskCount,\n          filter: this.state.filter,\n          onFilterChange: this.onFilterChange,\n          onClearCompleted: this.onClearCompleted\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 7\n    }, this);\n  }\n\n}","map":{"version":3,"names":["React","Component","NewTaskForm","TaskList","Footer","App","state","statusItem","createTaskItem","filter","onFilterChange","setState","onToggleEditing","id","toggleProperty","onToggleCompleted","addTask","text","newItem","newArr","editingItem","map","el","i","edit","deleteTask","item","propName","onClearCompleted","completed","label","Math","floor","random","active","editing","items","render","taskCount","e","length","visibleTasks"],"sources":["C:/Users/danil/VSCodeProjects/todo-app-react/src/components/app/App.js"],"sourcesContent":["import React, { Component } from 'react';\n\nimport NewTaskForm from '../new-task-form';\nimport TaskList from '../task-list';\nimport Footer from '../footer';\n\nexport default class App extends Component {\n\n  // deleteTask = (id) => {\n  //   this.setState(({ taskData }) => {\n  //     const idx = taskData.findIndex((e) => e.id === id);\n  //     const newArr = [...taskData.slice(0, idx), ...taskData.slice(idx + 1)];\n\n  //     return {\n  //       taskData: newArr,\n  //     };\n  //   });\n  // };\n\n  // onToggleDone = (id) => {\n  //   this.setState(({ taskData }) => {\n  //     const idx = taskData.findIndex((e) => e.id === id);\n  //     const oldItem = taskData[idx];\n  //     const newItem = { ...oldItem, active: !oldItem.active };\n  //     const newArr = [...taskData.slice(0, idx), newItem, ...taskData.slice(idx + 1)];\n  //     return {\n  //       taskData: newArr,\n  //     };\n  //   });\n  // };\n\n  // onClearCompleted = () => {\n  //   this.setState(({ taskData }) => {\n  //     const newArr = taskData.filter((task) => {\n  //       return task.active;\n  //     });\n  //     return {\n  //       taskData: newArr,\n  //     };\n  //   });\n  // };\n\n  // onEdit = (id) => {\n  //   this.setState(({ taskData }) => {\n  //     const idx = taskData.findIndex((e) => e.id === id);\n  //     const oldItem = taskData[idx];\n  //     const newItem = { ...oldItem, edit: !oldItem.edit };\n  //     const newArr = [...taskData.slice(0, idx), newItem, ...taskData.slice(idx + 1)];\n  //     return {\n  //       taskData: newArr,\n  //     };\n  //   });\n  // };\n\n  // handleEditTask = (id, text) => {\n  //   this.setState(({ taskData }) => {\n  //     const idx = taskData.findIndex((e) => e.id === id);\n  //     const oldItem = taskData[idx];\n  //     const newItem = { ...oldItem, label: text, edit: false };\n  //     const newArr = [...taskData.slice(0, idx), newItem, ...taskData.slice(idx + 1)];\n  //     return {\n  //       taskData: newArr,\n  //     };\n  //   });\n  // };\n\n  // onFilterChange = (filter) => {\n  //   this.setState({ filter });\n  // };\n\n  state = {\n    statusItem: [\n      this.createTaskItem('Сompleted task'),\n      this.createTaskItem('Editing task'),\n      this.createTaskItem('Active task'),\n    ],\n    filter: 'all',\n  };\n\n  createTaskItem(label) {\n    return {\n      label: label,\n      id: Math.floor(Math.random() * 1000000),\n      completed: false,\n      active: true,\n      editing: false,\n    };\n  }\n  \n  onFilterChange = (filter) => {\n    this.setState({\n      filter,\n    });\n  };\n\n  onToggleEditing = (id) => {\n    this.toggleProperty(id, 'editing');\n  };\n\n  onToggleCompleted = (id) => {\n    this.toggleProperty(id, 'completed');\n  };\n\n  addTask = (text) => {\n    const newItem = this.createTaskItem(text);\n\n    this.setState(({ statusItem }) => {\n      const newArr = [...statusItem, newItem];\n      return {\n        statusItem: newArr,\n      };\n    });\n  };\n\n  editingItem = (id, text) => {\n    this.setState(({ statusItem }) => {\n      const newArr = statusItem.map((el, i) => {\n        if (el.id === id) {\n          el.text = text;\n          el.edit = !statusItem[i].edit;\n        }\n        return el;\n      });\n      return {\n        statusItem: newArr,\n      };\n    });\n  };\n\n  deleteTask = (id) => {\n    this.setState(({ statusItem }) => ({\n      statusItem: statusItem.filter((item) => item.id !== id),\n    }));\n  };\n\n  toggleProperty = (id, propName) => {\n    this.setState(({ statusItem }) => {\n      const newArr = statusItem.map((el, i) => {\n        if (el.id === id) {\n          el[propName] = !statusItem[i][propName];\n        }\n        return el;\n      });\n      return {\n        statusItem: newArr,\n      };\n    });\n  };\n\n  filter(items, filter) {\n    switch (filter) {\n      case 'all':\n        return items;\n      case 'active':\n        return items.filter((item) => item.active);\n      case 'done':\n        return items.filter((item) => !item.active);\n      default:\n        return items;\n    }\n  }\n\n  onClearCompleted = () => {\n    this.setState(({ statusItem }) => ({\n      statusItem: statusItem.filter((el) => !el.completed),\n    }));\n  };\n\n  render() {\n    const taskCount = this.state.statusItem.filter((e) => e.active).length;\n    const visibleTasks = this.filter(this.state.statusItem, this.state.filter);\n    return (\n      <section className=\"todoapp\">\n        <NewTaskForm onAddTask={this.addTask} />\n        <section className=\"main\">\n          <TaskList\n            taskData={visibleTasks}\n            onDeleted={this.deleteTask}\n            onToggleCompleted={this.onToggleCompleted}\n            onToggleEditing={this.onToggleEditing}\n            editingItem={this.editingItem}\n          />\n          <Footer\n            count={taskCount}\n            filter={this.state.filter}\n            onFilterChange={this.onFilterChange}\n            onClearCompleted={this.onClearCompleted}\n          />\n        </section>\n      </section>\n    );\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}